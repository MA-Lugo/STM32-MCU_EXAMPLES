
GPIO_IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f4  080002fc  000102fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f4  080002f4  000102fc  2**0
                  CONTENTS
  4 .ARM          00000000  080002f4  080002f4  000102fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f4  080002fc  000102fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f4  080002f4  000102f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002fc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002fc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000011c  00000000  00000000  00010325  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000080  00000000  00000000  00010441  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  000104c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f56  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000414  00000000  00000000  00011496  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003cdd  00000000  00000000  000118aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00015604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002dc 	.word	0x080002dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002dc 	.word	0x080002dc

08000170 <main>:


#include <stdint.h>

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0

//Enable Peripherarl clock for GPIOA and GPIOC
	uint32_t *pAPB2_ENR		= (uint32_t*) APB2_ENR;
 8000176:	4b2c      	ldr	r3, [pc, #176]	; (8000228 <main+0xb8>)
 8000178:	617b      	str	r3, [r7, #20]
	*pAPB2_ENR		|= ( 1 << 3 );		//Enable GPIOB clock
 800017a:	697b      	ldr	r3, [r7, #20]
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f043 0208 	orr.w	r2, r3, #8
 8000182:	697b      	ldr	r3, [r7, #20]
 8000184:	601a      	str	r2, [r3, #0]
	*pAPB2_ENR		|= ( 1 << 4 );		//Enable GPIOC clock
 8000186:	697b      	ldr	r3, [r7, #20]
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	f043 0210 	orr.w	r2, r3, #16
 800018e:	697b      	ldr	r3, [r7, #20]
 8000190:	601a      	str	r2, [r3, #0]


//Configure pins
	uint32_t *pGPIOB_CRL	= (uint32_t*) GPIOB_CRL;
 8000192:	4b26      	ldr	r3, [pc, #152]	; (800022c <main+0xbc>)
 8000194:	613b      	str	r3, [r7, #16]
	uint32_t *pGPIOC_CRH	= (uint32_t*) GPIOC_CRH;
 8000196:	4b26      	ldr	r3, [pc, #152]	; (8000230 <main+0xc0>)
 8000198:	60fb      	str	r3, [r7, #12]

//***SET PB4
	//Set as input							MODE
	*pGPIOB_CRL		&= ~( 0x3 << 21 );
 800019a:	693b      	ldr	r3, [r7, #16]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 80001a2:	693b      	ldr	r3, [r7, #16]
 80001a4:	601a      	str	r2, [r3, #0]
	// Set input with pull-up/pull-down 	CNF
	*pGPIOB_CRL		|= ( 1 << 23);
 80001a6:	693b      	ldr	r3, [r7, #16]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80001ae:	693b      	ldr	r3, [r7, #16]
 80001b0:	601a      	str	r2, [r3, #0]
	*pGPIOB_CRL		&= ~( 1 << 22);
 80001b2:	693b      	ldr	r3, [r7, #16]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80001ba:	693b      	ldr	r3, [r7, #16]
 80001bc:	601a      	str	r2, [r3, #0]
	//set pull-up resistor	(1:pull-up, 0:pull-down)
	uint32_t *pPORTB_WPU  = (uint32_t*)	GPIOB_ODR;
 80001be:	4b1d      	ldr	r3, [pc, #116]	; (8000234 <main+0xc4>)
 80001c0:	60bb      	str	r3, [r7, #8]
	*pPORTB_WPU		|= ( 1 << 5);
 80001c2:	68bb      	ldr	r3, [r7, #8]
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	f043 0220 	orr.w	r2, r3, #32
 80001ca:	68bb      	ldr	r3, [r7, #8]
 80001cc:	601a      	str	r2, [r3, #0]


  //***SET PC13
	//Set as output max 10MHZ				MODE
	*pGPIOC_CRH		&= ~( 1 << 21);
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	601a      	str	r2, [r3, #0]
	*pGPIOC_CRH		|= ( 1 << 20);
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	601a      	str	r2, [r3, #0]
	// Set Push-pull output					CNF
	*pGPIOC_CRH		&= ~( 0x3 << 23);
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	601a      	str	r2, [r3, #0]



//Clear PORTC
	uint32_t *pPORTC_OUT	= (uint32_t*) GPIOC_ODR;
 80001f2:	4b11      	ldr	r3, [pc, #68]	; (8000238 <main+0xc8>)
 80001f4:	607b      	str	r3, [r7, #4]
	*pPORTC_OUT = 0X0000;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
//Define PORTB input data reg
	uint32_t *pPORTB_IDR	= (uint32_t*) GPIOB_IDR;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <main+0xcc>)
 80001fe:	603b      	str	r3, [r7, #0]

	while(1){
		if (*pPORTB_IDR & ( 1 << 5)){
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f003 0320 	and.w	r3, r3, #32
 8000208:	2b00      	cmp	r3, #0
 800020a:	d006      	beq.n	800021a <main+0xaa>
			*pPORTC_OUT |= ( 1 << 13);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	e7f2      	b.n	8000200 <main+0x90>
		}
		else{
			*pPORTC_OUT &= ~( 1 << 13);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]
		if (*pPORTB_IDR & ( 1 << 5)){
 8000226:	e7eb      	b.n	8000200 <main+0x90>
 8000228:	40021018 	.word	0x40021018
 800022c:	40010c00 	.word	0x40010c00
 8000230:	40011004 	.word	0x40011004
 8000234:	40010c0c 	.word	0x40010c0c
 8000238:	4001100c 	.word	0x4001100c
 800023c:	40010c08 	.word	0x40010c08

08000240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000240:	480d      	ldr	r0, [pc, #52]	; (8000278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000242:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000244:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <LoopForever+0x6>)
  ldr r1, =_edata
 800024a:	490d      	ldr	r1, [pc, #52]	; (8000280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <LoopForever+0xe>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000260:	4c0a      	ldr	r4, [pc, #40]	; (800028c <LoopForever+0x16>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026e:	f000 f811 	bl	8000294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000272:	f7ff ff7d 	bl	8000170 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   r0, =_estack
 8000278:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800027c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000280:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000284:	080002fc 	.word	0x080002fc
  ldr r2, =_sbss
 8000288:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800028c:	2000001c 	.word	0x2000001c

08000290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_2_IRQHandler>
	...

08000294 <__libc_init_array>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	2500      	movs	r5, #0
 8000298:	4e0c      	ldr	r6, [pc, #48]	; (80002cc <__libc_init_array+0x38>)
 800029a:	4c0d      	ldr	r4, [pc, #52]	; (80002d0 <__libc_init_array+0x3c>)
 800029c:	1ba4      	subs	r4, r4, r6
 800029e:	10a4      	asrs	r4, r4, #2
 80002a0:	42a5      	cmp	r5, r4
 80002a2:	d109      	bne.n	80002b8 <__libc_init_array+0x24>
 80002a4:	f000 f81a 	bl	80002dc <_init>
 80002a8:	2500      	movs	r5, #0
 80002aa:	4e0a      	ldr	r6, [pc, #40]	; (80002d4 <__libc_init_array+0x40>)
 80002ac:	4c0a      	ldr	r4, [pc, #40]	; (80002d8 <__libc_init_array+0x44>)
 80002ae:	1ba4      	subs	r4, r4, r6
 80002b0:	10a4      	asrs	r4, r4, #2
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	d105      	bne.n	80002c2 <__libc_init_array+0x2e>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002bc:	4798      	blx	r3
 80002be:	3501      	adds	r5, #1
 80002c0:	e7ee      	b.n	80002a0 <__libc_init_array+0xc>
 80002c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002c6:	4798      	blx	r3
 80002c8:	3501      	adds	r5, #1
 80002ca:	e7f2      	b.n	80002b2 <__libc_init_array+0x1e>
 80002cc:	080002f4 	.word	0x080002f4
 80002d0:	080002f4 	.word	0x080002f4
 80002d4:	080002f4 	.word	0x080002f4
 80002d8:	080002f8 	.word	0x080002f8

080002dc <_init>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	bf00      	nop
 80002e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e2:	bc08      	pop	{r3}
 80002e4:	469e      	mov	lr, r3
 80002e6:	4770      	bx	lr

080002e8 <_fini>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	bf00      	nop
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr
